@page "/customers"
@* Add InteractiveAuto to render on ther server initially and then have the client (WebAssembly) take controle for events (onclick, bind, etc.) *@
@rendermode InteractiveAuto
@using BlazorApp.Client.Models
@using BlazorApp.Client.Services
@inject CustomerService CustomerService

<PageTitle>Customers</PageTitle>

<h1 style="display: inline-block; padding-right: 10px">Customers</h1>

<button class="btn btn-sm btn-primary mb-3" @onclick="OpenAddDialog">Add Customer</button>

<div class="mb-3">
    <InputText class="form-control form-control-sm"
               @bind-Value="searchTerm"
               @onkeydown="HandleSearchKey"
               placeholder="Search by company or contact..." />
</div>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else if (!customers.Any())
{
    <div class="alert alert-primary" style="margin-top: 10px">No customers found.</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                @* <th>Id</th> *@
                <th>Company Name</th>
                <th>Contact Name</th>
                <th>Address</th>
                <th>City</th>
                <th>Region</th>
                <th>PostalCode</th>
                <th>Country</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td style="text-align: center">
                        <button class="btn btn-sm btn-warning" @onclick="() => EditCustomer(customer)">Edit</button>
                        @* <button class="btn btn-sm btn-danger" @onclick="() => DeleteCustomer(customer.Id)">Delete</button> *@
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(customer.Id.Value)">Delete</button>
                    </td>
                    @* <td>@customer.Id</td> *@    
                    <td>@customer.CompanyName</td>
                    <td>@customer.ContactName</td>
                    <td>@customer.Address</td>
                    <td>@customer.City</td>
                    <td>@customer.Region</td>
                    <td>@customer.PostalCode</td>
                    <td>@customer.Country</td>
                    <td>@customer.Phone</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mb-3">
        <button class="btn btn-sm btn-primary" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Prev</button>
        <span> Page @currentPage of @Math.Ceiling((double)totalCount / pageSize) </span>
        <button class="btn btn-sm btn-primary" @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>

        <span>Page Size: </span>
        <select class="form-select orm-select-sm" style="width: 10%; display: inline-block" @onchange="HandlePageSizeChanged">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
        </select>
    </div>

    <div class="mt-3">
        <span>Total Customers: @totalCount</span>
    </div>
}

@if (showDialog)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((isEditMode ? "Edit" : "Add") + " Customer")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <EditForm Model="editingCustomer" OnValidSubmit="SaveCustomer">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@

                    <div class="modal-body">
                        @* <div class="mb-2">
                            <label>Id</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.Id" />
                            <ValidationMessage For="@(() => editingCustomer.Id)" />
                        </div> *@
                        <div class="mb-2">
                            <label>Company Name</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.CompanyName" />
                            <ValidationMessage For="@(() => editingCustomer.CompanyName)" />
                        </div>
                        <div class="mb-2">
                            <label>Contact Name</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.ContactName" />
                            <ValidationMessage For="@(() => editingCustomer.ContactName)" />
                        </div>
                        <div class="mb-2">
                            <label>Address</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.Address" />
                            <ValidationMessage For="@(() => editingCustomer.Address)" />
                        </div>
                        <div class="mb-2">
                            <label>City</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.City" />
                            <ValidationMessage For="@(() => editingCustomer.City)" />
                        </div>
                        <div class="mb-2">
                            <label>Region</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.Region" />
                            <ValidationMessage For="@(() => editingCustomer.Region)" />
                        </div>
                        <div class="mb-2">
                            <label>PostalCode</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.PostalCode" />
                            <ValidationMessage For="@(() => editingCustomer.PostalCode)" />
                        </div>
                        <div class="mb-2">
                            <label>Country</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.Country" />
                            <ValidationMessage For="@(() => editingCustomer.Country)" />
                        </div>
                        <div class="mb-2">
                            <label>Phone</label>
                            <InputText class="form-control" @bind-Value="editingCustomer.Phone" />
                            <ValidationMessage For="@(() => editingCustomer.Phone)" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-sm btn-secondary" type="button" @onclick="CloseDialog">Cancel</button>
                        <button class="btn btn-sm btn-success" type="submit">Save</button>
                    </div>
                </EditForm>                
            </div>
        </div>
    </div>
}

@if (showDeleteConfirm)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this customer?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-sm btn-secondary" @onclick="() => showDeleteConfirm = false">Cancel</button>
                    <button class="btn btn-sm btn-danger" @onclick="ConfirmDeleteAndProceed">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger" style="margin-top: 10px">@errorMessage</div>    
}

@code {
    private CustomerResponse customerResponse = new();
    private List<Customer> customers => customerResponse.Data;
    private int totalCount => customerResponse.TotalCount;
    private int currentPage = 1, pageSize = 5;
    private bool CanGoPrevious => currentPage > 1;
    private bool CanGoNext => currentPage * pageSize < totalCount;
    private bool showDialog = false, isEditMode = false, showDeleteConfirm = false;
    private Customer editingCustomer = new();
    private string? errorMessage;
    private string searchTerm = string.Empty;
    private Guid deleteCustomerId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            customerResponse = await CustomerService.GetCustomers(currentPage, pageSize, searchTerm);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task NextPage()
    {
        currentPage++;
        await LoadCustomers();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadCustomers();
        }
    }

    private void OpenAddDialog()
    {
        editingCustomer = new Customer();
        isEditMode = false;
        showDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
        editingCustomer = new Customer();
    }

    private void EditCustomer(Customer customer)
    {
        editingCustomer = new Customer
        {
            Id = customer.Id,
            CompanyName = customer.CompanyName,
            ContactName = customer.ContactName,
            Address = customer.Address,
            City = customer.City,
            Region = customer.Region,
            PostalCode = customer.PostalCode,
            Country = customer.Country,
            Phone = customer.Phone
        };

        isEditMode = true;
        showDialog = true;
    }

    private async Task SaveCustomer()
    {
        try
        {
            if (isEditMode)
            {
                await CustomerService.UpdateCustomer(editingCustomer);
            }
            else
            {
                await CustomerService.CreateCustomer(editingCustomer);
            }

            showDialog = false;
            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void ConfirmDelete(Guid id)
    {
        deleteCustomerId = id;
        showDeleteConfirm = true;
    }

    private async Task ConfirmDeleteAndProceed()
    {
        showDeleteConfirm = false;
        await DeleteCustomer(deleteCustomerId);
        deleteCustomerId = Guid.Empty;
    }

    private async Task DeleteCustomer(Guid id)
    {
        try
        {
            await CustomerService.DeleteCustomer(id);
            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete customer: {ex.Message}";
        }
    }

    private async Task HandlePageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadCustomers();
        }
    }

    private async Task HandleSearchKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadCustomers();
        }
    }
}